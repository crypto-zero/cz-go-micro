// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// versions:
// - protoc-gen-go-micro 23815987fd5c65de1306066d8380981c5ec77123
// - protoc              v3.19.4
// source: api/service/proto/api.proto

package proto

import (
	api "c-z.dev/go-micro/api"
	client "c-z.dev/go-micro/client"
	server "c-z.dev/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// NewAPIEndpoints API Endpoints for API service
func NewAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// APIService is the client API for API service.
type APIService interface {
	Register(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EmptyResponse, error)
	Deregister(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EmptyResponse, error)
}

type aPIService struct {
	c    client.Client
	name string
}

func NewAPIService(name string, c client.Client) APIService {
	return &aPIService{
		c:    c,
		name: name,
	}
}

func (c *aPIService) Register(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "API.Register", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIService) Deregister(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "API.Deregister", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIHandler is the server API for API service.
type APIHandler interface {
	Register(context.Context, *Endpoint, *EmptyResponse) error
	Deregister(context.Context, *Endpoint, *EmptyResponse) error
}

func RegisterAPIHandler(s server.Server, hdlr APIHandler, opts ...server.HandlerOption) error {
	type aPI interface {
		Register(ctx context.Context, in *Endpoint, out *EmptyResponse) error
		Deregister(ctx context.Context, in *Endpoint, out *EmptyResponse) error
	}
	type API struct {
		aPI
	}
	h := &aPIHandler{hdlr}
	return s.Handle(s.NewHandler(&API{h}, opts...))
}

type aPIHandler struct {
	APIHandler
}

func (h *aPIHandler) Register(ctx context.Context, in *Endpoint, out *EmptyResponse) error {
	return h.APIHandler.Register(ctx, in, out)
}

func (h *aPIHandler) Deregister(ctx context.Context, in *Endpoint, out *EmptyResponse) error {
	return h.APIHandler.Deregister(ctx, in, out)
}
