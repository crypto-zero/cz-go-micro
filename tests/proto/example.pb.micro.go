// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// versions:
// - protoc-gen-go-micro 973dae118bcd8a11be9947a7dfc7f88de33578cc
// - protoc              v3.21.8
// source: example.proto

package proto

import (
	api "c-z.dev/go-micro/api"
	client "c-z.dev/go-micro/client"
	server "c-z.dev/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// NewExampleSrvEndpoints API Endpoints for ExampleSrv service
func NewExampleSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// ExampleSrvService is the client API for ExampleSrv service.
type ExampleSrvService interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error)
	HelloStreamRequestX(ctx context.Context, opts ...client.CallOption) (ExampleSrv_HelloStreamRequestXService, error)
	HelloStreamReplyX(ctx context.Context, in *HelloStreamRequest, opts ...client.CallOption) (ExampleSrv_HelloStreamReplyXService, error)
	HelloStreamRequestReply(ctx context.Context, opts ...client.CallOption) (ExampleSrv_HelloStreamRequestReplyService, error)
}

type exampleSrvService struct {
	c    client.Client
	name string
}

func NewExampleSrvService(name string, c client.Client) ExampleSrvService {
	return &exampleSrvService{
		c:    c,
		name: name,
	}
}

func (c *exampleSrvService) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error) {
	req := c.c.NewRequest(c.name, "ExampleSrv.Hello", in)
	out := new(HelloReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleSrvService) HelloStreamRequestX(ctx context.Context, opts ...client.CallOption) (ExampleSrv_HelloStreamRequestXService, error) {
	req := c.c.NewRequest(c.name, "ExampleSrv.HelloStreamRequestX", &HelloStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &exampleSrvServiceHelloStreamRequestX{stream}, nil
}

type ExampleSrv_HelloStreamRequestXService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*HelloStreamRequest) error
}

type exampleSrvServiceHelloStreamRequestX struct {
	stream client.Stream
}

func (x *exampleSrvServiceHelloStreamRequestX) Close() error {
	return x.stream.Close()
}

func (x *exampleSrvServiceHelloStreamRequestX) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleSrvServiceHelloStreamRequestX) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleSrvServiceHelloStreamRequestX) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleSrvServiceHelloStreamRequestX) Send(m *HelloStreamRequest) error {
	return x.stream.Send(m)
}

func (c *exampleSrvService) HelloStreamReplyX(ctx context.Context, in *HelloStreamRequest, opts ...client.CallOption) (ExampleSrv_HelloStreamReplyXService, error) {
	req := c.c.NewRequest(c.name, "ExampleSrv.HelloStreamReplyX", &HelloStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &exampleSrvServiceHelloStreamReplyX{stream}, nil
}

type ExampleSrv_HelloStreamReplyXService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*HelloStreamReply, error)
}

type exampleSrvServiceHelloStreamReplyX struct {
	stream client.Stream
}

func (x *exampleSrvServiceHelloStreamReplyX) Close() error {
	return x.stream.Close()
}

func (x *exampleSrvServiceHelloStreamReplyX) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleSrvServiceHelloStreamReplyX) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleSrvServiceHelloStreamReplyX) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleSrvServiceHelloStreamReplyX) Recv() (*HelloStreamReply, error) {
	m := new(HelloStreamReply)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleSrvService) HelloStreamRequestReply(ctx context.Context, opts ...client.CallOption) (ExampleSrv_HelloStreamRequestReplyService, error) {
	req := c.c.NewRequest(c.name, "ExampleSrv.HelloStreamRequestReply", &HelloStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &exampleSrvServiceHelloStreamRequestReply{stream}, nil
}

type ExampleSrv_HelloStreamRequestReplyService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*HelloStreamRequest) error
	Recv() (*HelloStreamReply, error)
}

type exampleSrvServiceHelloStreamRequestReply struct {
	stream client.Stream
}

func (x *exampleSrvServiceHelloStreamRequestReply) Close() error {
	return x.stream.Close()
}

func (x *exampleSrvServiceHelloStreamRequestReply) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleSrvServiceHelloStreamRequestReply) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleSrvServiceHelloStreamRequestReply) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleSrvServiceHelloStreamRequestReply) Send(m *HelloStreamRequest) error {
	return x.stream.Send(m)
}

func (x *exampleSrvServiceHelloStreamRequestReply) Recv() (*HelloStreamReply, error) {
	m := new(HelloStreamReply)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleSrvHandler is the server API for ExampleSrv service.
type ExampleSrvHandler interface {
	Hello(context.Context, *HelloRequest, *HelloReply) error
	HelloStreamRequestX(context.Context, ExampleSrv_HelloStreamRequestXStream) error
	HelloStreamReplyX(context.Context, *HelloStreamRequest, ExampleSrv_HelloStreamReplyXStream) error
	HelloStreamRequestReply(context.Context, ExampleSrv_HelloStreamRequestReplyStream) error
}

func RegisterExampleSrvHandler(s server.Server, hdlr ExampleSrvHandler, opts ...server.HandlerOption) error {
	type exampleSrv interface {
		Hello(ctx context.Context, in *HelloRequest, out *HelloReply) error
		HelloStreamRequestX(ctx context.Context, stream server.Stream) error
		HelloStreamReplyX(ctx context.Context, stream server.Stream) error
		HelloStreamRequestReply(ctx context.Context, stream server.Stream) error
	}
	type ExampleSrv struct {
		exampleSrv
	}
	h := &exampleSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&ExampleSrv{h}, opts...))
}

type exampleSrvHandler struct {
	ExampleSrvHandler
}

func (h *exampleSrvHandler) Hello(ctx context.Context, in *HelloRequest, out *HelloReply) error {
	return h.ExampleSrvHandler.Hello(ctx, in, out)
}

func (h *exampleSrvHandler) HelloStreamRequestX(ctx context.Context, stream server.Stream) error {
	return h.ExampleSrvHandler.HelloStreamRequestX(ctx, &exampleSrvHelloStreamRequestXStream{stream})
}

type ExampleSrv_HelloStreamRequestXStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*HelloStreamRequest, error)
}

type exampleSrvHelloStreamRequestXStream struct {
	stream server.Stream
}

func (x *exampleSrvHelloStreamRequestXStream) Close() error {
	return x.stream.Close()
}

func (x *exampleSrvHelloStreamRequestXStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleSrvHelloStreamRequestXStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleSrvHelloStreamRequestXStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleSrvHelloStreamRequestXStream) Recv() (*HelloStreamRequest, error) {
	m := new(HelloStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *exampleSrvHandler) HelloStreamReplyX(ctx context.Context, stream server.Stream) error {
	m := new(HelloStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ExampleSrvHandler.HelloStreamReplyX(ctx, m, &exampleSrvHelloStreamReplyXStream{stream})
}

type ExampleSrv_HelloStreamReplyXStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*HelloStreamReply) error
}

type exampleSrvHelloStreamReplyXStream struct {
	stream server.Stream
}

func (x *exampleSrvHelloStreamReplyXStream) Close() error {
	return x.stream.Close()
}

func (x *exampleSrvHelloStreamReplyXStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleSrvHelloStreamReplyXStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleSrvHelloStreamReplyXStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleSrvHelloStreamReplyXStream) Send(m *HelloStreamReply) error {
	return x.stream.Send(m)
}

func (h *exampleSrvHandler) HelloStreamRequestReply(ctx context.Context, stream server.Stream) error {
	return h.ExampleSrvHandler.HelloStreamRequestReply(ctx, &exampleSrvHelloStreamRequestReplyStream{stream})
}

type ExampleSrv_HelloStreamRequestReplyStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*HelloStreamReply) error
	Recv() (*HelloStreamRequest, error)
}

type exampleSrvHelloStreamRequestReplyStream struct {
	stream server.Stream
}

func (x *exampleSrvHelloStreamRequestReplyStream) Close() error {
	return x.stream.Close()
}

func (x *exampleSrvHelloStreamRequestReplyStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleSrvHelloStreamRequestReplyStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleSrvHelloStreamRequestReplyStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleSrvHelloStreamRequestReplyStream) Send(m *HelloStreamReply) error {
	return x.stream.Send(m)
}

func (x *exampleSrvHelloStreamRequestReplyStream) Recv() (*HelloStreamRequest, error) {
	m := new(HelloStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
