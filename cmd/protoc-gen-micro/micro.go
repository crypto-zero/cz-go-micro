package main

import (
	"fmt"
	"strings"

	options "google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	apiPackage     = protogen.GoImportPath("c-z.dev/go-micro/api")
	clientPackage  = protogen.GoImportPath("c-z.dev/go-micro/client")
	serverPackage  = protogen.GoImportPath("c-z.dev/go-micro/server")
)

// generateFile generates a _.pb.micro.go file containing go-micro service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + ".pb.micro.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-micro. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-micro ", tag)
	g.P("// - protoc              ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(file, g)
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the go-micro service definitions, excluding the package statement.
func generateFileContent(file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// Reference imports to suppress errors if they are not otherwise used.")
	g.P("var _ ", apiPackage.Ident("Endpoint"))
	g.P("var _ ", contextPackage.Ident("Context"))
	g.P("var _ ", clientPackage.Ident("Option"))
	g.P("var _ ", serverPackage.Ident("Option"))
	g.P()

	for _, service := range file.Services {
		genService(g, service)
	}
}

func genService(g *protogen.GeneratedFile, service *protogen.Service) {
	clientName := service.GoName + "Service"

	// generate new api endpoints function
	g.P()
	g.P("// ", "New", service.GoName, "Endpoints", " API Endpoints for ", service.GoName, " service")
	g.P("func New", service.GoName, "Endpoints () []*", apiPackage.Ident("Endpoint"), " {")
	g.P("return []*", apiPackage.Ident("Endpoint"), "{")
	for _, method := range service.Methods {
		opt := method.Desc.Options()
		if opt == nil || !proto.HasExtension(opt, options.E_Http) {
			continue
		}
		g.P("&", apiPackage.Ident("Endpoint"), "{")
		generateEndpoint(service.GoName, method, g)
		g.P("},")
	}
	g.P("}")
	g.P("}")
	g.P()

	g.P()
	g.P("// ", clientName, " is the client API for ", service.GoName, " service.")

	// Client interface.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(clientName, service.Location)
	g.P("type ", clientName, " interface {")
	for _, method := range service.Methods {
		g.Annotate(clientName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		g.P(method.Comments.Leading, clientSignature(g, method))
	}
	g.P("}")
	g.P()

	// Client structure.
	g.P("type ", unexport(clientName), " struct {")
	g.P("c ", clientPackage.Ident("Client"))
	g.P("name string")
	g.P("}")
	g.P()

	// NewClient factory.
	g.P("func New", clientName, " (name string, c ", clientPackage.Ident("Client"), ") ", clientName, " {")
	g.P("return &", unexport(clientName), "{")
	g.P("c: c,")
	g.P("name: name,")
	g.P("}")
	g.P("}")
	g.P()

	// Client method implementations.
	var methodIndex, streamIndex int
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			genClientMethod(service.GoName, clientName, g, method)
			methodIndex++
		} else {
			// Streaming RPC method
			genClientMethod(service.GoName, clientName, g, method)
			streamIndex++
		}
	}

	// Server interface.
	serverType := service.GoName + "Handler"
	g.P("// ", serverType, " is the server API for ", service.GoName, " service.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(serverType, service.Location)
	g.P("type ", serverType, " interface {")
	for _, method := range service.Methods {
		g.Annotate(serverType+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		g.P(method.Comments.Leading, serverSignature(service.GoName, g, method))
	}
	g.P("}")
	g.P()

	// Server registration.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func Register", service.GoName, "Handler(s ", serverPackage.Ident("Server"), ", hdlr ", serverType, ", opts ...", serverPackage.Ident("HandlerOption"), ") error {")
	g.P("type ", unexport(service.GoName), " interface {")

	// generate interface methods
	for _, method := range service.Methods {
		methName := method.GoName
		inType := g.QualifiedGoIdent(method.Input.GoIdent)
		outType := g.QualifiedGoIdent(method.Output.GoIdent)

		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			g.P(methName, "(ctx ", contextPackage.Ident("Context"), ", in *", inType, ", out *", outType, ") error")
			continue
		}
		g.P(methName, "(ctx ", contextPackage.Ident("Context"), ", stream ", serverPackage.Ident("Stream"), ") error")
	}
	g.P("}")
	g.P("type ", service.GoName, " struct {")
	g.P(unexport(service.GoName))
	g.P("}")
	g.P("h := &", unexport(service.GoName), "Handler{hdlr}")
	for _, method := range service.Methods {
		opt := method.Desc.Options()
		if opt == nil || !proto.HasExtension(opt, options.E_Http) {
			continue
		}
		g.P("opts = append(opts, ", apiPackage.Ident("WithEndpoint"), "(&", apiPackage.Ident("Endpoint"), "{")
		generateEndpoint(service.GoName, method, g)
		g.P("}))")
	}
	g.P("return s.Handle(s.NewHandler(&", service.GoName, "{h}, opts...))")
	g.P("}")
	g.P()

	g.P("type ", unexport(service.GoName), "Handler struct {")
	g.P(serverType)
	g.P("}")

	// Server handler implementations.
	for _, method := range service.Methods {
		generateServerMethod(service.GoName, g, method)
	}
}

func clientSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	if !method.Desc.IsStreamingClient() {
		s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent)
	}
	s += ", opts ..." + g.QualifiedGoIdent(clientPackage.Ident("CallOption")) + ") ("
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
	} else {
		s += method.Parent.GoName + "_" + method.GoName + "Service"
	}
	s += ", error)"
	return s
}

func genClientMethod(srvName, clientName string, g *protogen.GeneratedFile, method *protogen.Method) {
	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	reqMethod := fmt.Sprintf("%s.%s", srvName, method.GoName)
	inType := g.QualifiedGoIdent(method.Input.GoIdent)
	outType := g.QualifiedGoIdent(method.Output.GoIdent)

	g.P("func (c *", unexport(clientName), ") ", clientSignature(g, method), "{")
	if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
		g.P(`req := c.c.NewRequest(c.name, "`, reqMethod, `", in)`)
		g.P("out := new(", outType, ")")
		g.P("err := ", `c.c.Call(ctx, req, out, opts...)`)
		g.P("if err != nil { return nil, err }")
		g.P("return out, nil")
		g.P("}")
		g.P()
		return
	}
	streamType := unexport(srvName) + "Service" + method.GoName
	g.P(`req := c.c.NewRequest(c.name, "`, reqMethod, `", &`, inType, `{})`)
	g.P("stream, err := c.c.Stream(ctx, req, opts...)")
	g.P("if err != nil { return nil, err }")

	if !method.Desc.IsStreamingClient() {
		g.P("if err := stream.Send(in); err != nil { return nil, err }")
	}

	g.P("return &", streamType, "{stream}, nil")
	g.P("}")
	g.P()

	genSend := method.Desc.IsStreamingClient()
	genRecv := method.Desc.IsStreamingServer()

	// Stream auxiliary types and methods.
	g.P("type ", srvName, "_", method.GoName, "Service interface {")
	g.P("Context() ", contextPackage.Ident("Context"))
	g.P("SendMsg(interface{}) error")
	g.P("RecvMsg(interface{}) error")
	g.P("Close() error")

	if genSend {
		g.P("Send(*", inType, ") error")
	}
	if genRecv {
		g.P("Recv() (*", outType, ", error)")
	}
	g.P("}")
	g.P()

	g.P("type ", streamType, " struct {")
	g.P("stream ", clientPackage.Ident("Stream"))
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") Close() error {")
	g.P("return x.stream.Close()")
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") Context() context.Context {")
	g.P("return x.stream.Context()")
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") SendMsg(m interface{}) error {")
	g.P("return x.stream.Send(m)")
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") RecvMsg(m interface{}) error {")
	g.P("return x.stream.Recv(m)")
	g.P("}")
	g.P()

	if genSend {
		g.P("func (x *", streamType, ") Send(m *", inType, ") error {")
		g.P("return x.stream.Send(m)")
		g.P("}")
		g.P()

	}

	if genRecv {
		g.P("func (x *", streamType, ") Recv() (*", outType, ", error) {")
		g.P("m := new(", outType, ")")
		g.P("err := x.stream.Recv(m)")
		g.P("if err != nil {")
		g.P("return nil, err")
		g.P("}")
		g.P("return m, nil")
		g.P("}")
		g.P()
	}
}

func serverSignature(srvName string, g *protogen.GeneratedFile, method *protogen.Method) string {
	var reqArgs []string
	ret := "error"
	reqArgs = append(reqArgs, g.QualifiedGoIdent(contextPackage.Ident("Context")))

	if !method.Desc.IsStreamingClient() {
		reqArgs = append(reqArgs, "*"+g.QualifiedGoIdent(method.Input.GoIdent))
	}
	if method.Desc.IsStreamingServer() || method.Desc.IsStreamingClient() {
		reqArgs = append(reqArgs, srvName+"_"+method.GoName+"Stream")
	}
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, "*"+g.QualifiedGoIdent(method.Output.GoIdent))
	}
	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}

func generateServerMethod(servName string, g *protogen.GeneratedFile, method *protogen.Method) string {
	methName := method.GoName
	hname := fmt.Sprintf("_%s_%s_Handler", servName, methName)
	serveType := servName + "Handler"
	inType := g.QualifiedGoIdent(method.Input.GoIdent)
	outType := g.QualifiedGoIdent(method.Output.GoIdent)

	if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
		g.P("func (h *", unexport(servName), "Handler) ", methName, "(ctx ", contextPackage.Ident("Context"), ", in *", inType, ", out *", outType, ") error {")
		g.P("return h.", serveType, ".", methName, "(ctx, in, out)")
		g.P("}")
		g.P()
		return hname
	}
	streamType := unexport(servName) + methName + "Stream"
	g.P("func (h *", unexport(servName), "Handler) ", methName, "(ctx ", contextPackage.Ident("Context"), ", stream ", serverPackage.Ident("Stream"), ") error {")
	if !method.Desc.IsStreamingClient() {
		g.P("m := new(", inType, ")")
		g.P("if err := stream.Recv(m); err != nil { return err }")
		g.P("return h.", serveType, ".", methName, "(ctx, m, &", streamType, "{stream})")
	} else {
		g.P("return h.", serveType, ".", methName, "(ctx, &", streamType, "{stream})")
	}
	g.P("}")
	g.P()

	genSend := method.Desc.IsStreamingServer()
	genRecv := method.Desc.IsStreamingClient()

	// Stream auxiliary types and methods.
	g.P("type ", servName, "_", methName, "Stream interface {")
	g.P("Context() ", contextPackage.Ident("Context"))
	g.P("SendMsg(interface{}) error")
	g.P("RecvMsg(interface{}) error")
	g.P("Close() error")

	if genSend {
		g.P("Send(*", outType, ") error")
	}

	if genRecv {
		g.P("Recv() (*", inType, ", error)")
	}

	g.P("}")
	g.P()

	g.P("type ", streamType, " struct {")
	g.P("stream ", serverPackage.Ident("Stream"))
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") Close() error {")
	g.P("return x.stream.Close()")
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") Context() context.Context {")
	g.P("return x.stream.Context()")
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") SendMsg(m interface{}) error {")
	g.P("return x.stream.Send(m)")
	g.P("}")
	g.P()

	g.P("func (x *", streamType, ") RecvMsg(m interface{}) error {")
	g.P("return x.stream.Recv(m)")
	g.P("}")
	g.P()

	if genSend {
		g.P("func (x *", streamType, ") Send(m *", outType, ") error {")
		g.P("return x.stream.Send(m)")
		g.P("}")
		g.P()
	}

	if genRecv {
		g.P("func (x *", streamType, ") Recv() (*", inType, ", error) {")
		g.P("m := new(", inType, ")")
		g.P("if err := x.stream.Recv(m); err != nil { return nil, err }")
		g.P("return m, nil")
		g.P("}")
		g.P()
	}

	return hname
}

// generateEndpoint creates the api endpoint
func generateEndpoint(servName string, method *protogen.Method, g *protogen.GeneratedFile) {
	opt := method.Desc.Options()
	if opt == nil || !proto.HasExtension(opt, options.E_Http) {
		return
	}
	// http rules
	r := proto.GetExtension(opt, options.E_Http)
	rule := r.(*options.HttpRule)
	var meth string
	var path string
	switch {
	case len(rule.GetDelete()) > 0:
		meth = "DELETE"
		path = rule.GetDelete()
	case len(rule.GetGet()) > 0:
		meth = "GET"
		path = rule.GetGet()
	case len(rule.GetPatch()) > 0:
		meth = "PATCH"
		path = rule.GetPatch()
	case len(rule.GetPost()) > 0:
		meth = "POST"
		path = rule.GetPost()
	case len(rule.GetPut()) > 0:
		meth = "PUT"
		path = rule.GetPut()
	}
	if len(meth) == 0 || len(path) == 0 {
		return
	}
	// TODO: process additional bindings
	g.P("Name:", fmt.Sprintf(`"%s.%s",`, servName, method.GoName))
	g.P("Path:", fmt.Sprintf(`[]string{"%s"},`, path))
	g.P("Method:", fmt.Sprintf(`[]string{"%s"},`, meth))
	if len(rule.GetGet()) == 0 {
		g.P("Body:", fmt.Sprintf(`"%s",`, rule.GetBody()))
	}
	if method.Desc.IsStreamingServer() || method.Desc.IsStreamingClient() {
		g.P("Stream: true,")
	}
	g.P(`Handler: "rpc",`)
}

const deprecationComment = "// Deprecated: Do not use."

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
