// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// versions:
// - protoc-gen-go-micro 23815987fd5c65de1306066d8380981c5ec77123
// - protoc              v3.19.4
// source: server/proto/server.proto

package proto

import (
	api "c-z.dev/go-micro/api"
	client "c-z.dev/go-micro/client"
	server "c-z.dev/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// NewServerEndpoints API Endpoints for Server service
func NewServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// ServerService is the client API for Server service.
type ServerService interface {
	Handle(ctx context.Context, in *HandleRequest, opts ...client.CallOption) (*HandleResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error)
}

type serverService struct {
	c    client.Client
	name string
}

func NewServerService(name string, c client.Client) ServerService {
	return &serverService{
		c:    c,
		name: name,
	}
}

func (c *serverService) Handle(ctx context.Context, in *HandleRequest, opts ...client.CallOption) (*HandleResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Handle", in)
	out := new(HandleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Subscribe", in)
	out := new(SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerHandler is the server API for Server service.
type ServerHandler interface {
	Handle(context.Context, *HandleRequest, *HandleResponse) error
	Subscribe(context.Context, *SubscribeRequest, *SubscribeResponse) error
}

func RegisterServerHandler(s server.Server, hdlr ServerHandler, opts ...server.HandlerOption) error {
	type server interface {
		Handle(ctx context.Context, in *HandleRequest, out *HandleResponse) error
		Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error
	}
	type Server struct {
		server
	}
	h := &serverHandler{hdlr}
	return s.Handle(s.NewHandler(&Server{h}, opts...))
}

type serverHandler struct {
	ServerHandler
}

func (h *serverHandler) Handle(ctx context.Context, in *HandleRequest, out *HandleResponse) error {
	return h.ServerHandler.Handle(ctx, in, out)
}

func (h *serverHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error {
	return h.ServerHandler.Subscribe(ctx, in, out)
}
