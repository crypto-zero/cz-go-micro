// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// versions:
// - protoc-gen-go-micro d443f9fa7da98fd9bd7d8b6b91abdf675e32e3f0
// - protoc              v3.19.4
// source: server/grpc/proto/test.proto

package proto

import (
	context "context"
	api "github.com/crypto-zero/go-micro/v2/api"
	client "github.com/crypto-zero/go-micro/v2/client"
	server "github.com/crypto-zero/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// TestService is the client API for Test service.
type TestService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	CallPcre(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	CallPcreInvalid(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Test.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) CallPcre(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Test.CallPcre", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) CallPcreInvalid(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Test.CallPcreInvalid", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestHandler is the server API for Test service.
type TestHandler interface {
	Call(context.Context, *Request, *Response) error
	CallPcre(context.Context, *Request, *Response) error
	CallPcreInvalid(context.Context, *Request, *Response) error
}

func RegisterTestHandler(s server.Server, hdlr TestHandler, opts ...server.HandlerOption) error {
	type test interface {
		Call(ctx context.Context, in *Request, out *Response) error
		CallPcre(ctx context.Context, in *Request, out *Response) error
		CallPcreInvalid(ctx context.Context, in *Request, out *Response) error
	}
	type Test struct {
		test
	}
	h := &testHandler{hdlr}
	return s.Handle(s.NewHandler(&Test{h}, opts...))
}

type testHandler struct {
	TestHandler
}

func (h *testHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.TestHandler.Call(ctx, in, out)
}

func (h *testHandler) CallPcre(ctx context.Context, in *Request, out *Response) error {
	return h.TestHandler.CallPcre(ctx, in, out)
}

func (h *testHandler) CallPcreInvalid(ctx context.Context, in *Request, out *Response) error {
	return h.TestHandler.CallPcreInvalid(ctx, in, out)
}
